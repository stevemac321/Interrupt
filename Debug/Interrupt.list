
Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002738  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080028cc  080028cc  000038cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028e4  080028e4  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  080028e4  080028e4  000038e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080028ec  080028ec  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028ec  080028ec  000038ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080028f0  080028f0  000038f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080028f4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  2000000c  08002900  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  08002900  00004250  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c0a3  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000198d  00000000  00000000  000100df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  00011a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000913  00000000  00000000  000125f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000155f8  00000000  00000000  00012f0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ca7c  00000000  00000000  00028503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a982  00000000  00000000  00034f7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bf901  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030e0  00000000  00000000  000bf944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000c2a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080028b4 	.word	0x080028b4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080028b4 	.word	0x080028b4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b086      	sub	sp, #24
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ca:	f000 faeb 	bl	8000aa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ce:	f000 f843 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d2:	f000 f925 	bl	8000720 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d6:	f000 f8f9 	bl	80006cc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80004da:	f000 f8a9 	bl	8000630 <MX_TIM2_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 80004de:	481b      	ldr	r0, [pc, #108]	@ (800054c <main+0x88>)
 80004e0:	f001 fb0e 	bl	8001b00 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */
	  // Check if write_index is lock-free and within array bounds
	  if (atomic_is_lock_free(&write_index))
	  {
		  int local_index = atomic_load(&write_index);  // Load the index atomically
 80004e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000550 <main+0x8c>)
 80004e6:	617b      	str	r3, [r7, #20]
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	f3bf 8f5b 	dmb	ish
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	f3bf 8f5b 	dmb	ish
 80004f4:	60bb      	str	r3, [r7, #8]
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	613b      	str	r3, [r7, #16]

		  // Main thread writes 0 if within bounds
		  if (local_index < ARRAY_SIZE)
 80004fa:	693b      	ldr	r3, [r7, #16]
 80004fc:	2b63      	cmp	r3, #99	@ 0x63
 80004fe:	dc11      	bgt.n	8000524 <main+0x60>
		  {
			  shared_array[local_index] = 1;
 8000500:	4a14      	ldr	r2, [pc, #80]	@ (8000554 <main+0x90>)
 8000502:	693b      	ldr	r3, [r7, #16]
 8000504:	2101      	movs	r1, #1
 8000506:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  atomic_fetch_add(&write_index, 1);  // Increment the index atomically
 800050a:	4b11      	ldr	r3, [pc, #68]	@ (8000550 <main+0x8c>)
 800050c:	f3bf 8f5b 	dmb	ish
 8000510:	e853 1f00 	ldrex	r1, [r3]
 8000514:	f101 0101 	add.w	r1, r1, #1
 8000518:	e843 1200 	strex	r2, r1, [r3]
 800051c:	2a00      	cmp	r2, #0
 800051e:	d1f7      	bne.n	8000510 <main+0x4c>
 8000520:	f3bf 8f5b 	dmb	ish
		  }

		  // Reset the index if it reaches the end (circular buffer)
		  if (local_index >= ARRAY_SIZE - 1)
 8000524:	693b      	ldr	r3, [r7, #16]
 8000526:	2b62      	cmp	r3, #98	@ 0x62
 8000528:	dd0b      	ble.n	8000542 <main+0x7e>
		  {
			  atomic_store(&write_index, 0);  // Reset to 0 atomically
 800052a:	4b09      	ldr	r3, [pc, #36]	@ (8000550 <main+0x8c>)
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	2300      	movs	r3, #0
 8000530:	607b      	str	r3, [r7, #4]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	461a      	mov	r2, r3
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	f3bf 8f5b 	dmb	ish
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	f3bf 8f5b 	dmb	ish

		  }

	  }
	  HAL_Delay(100);  // Adjust this delay as needed to balance execution
 8000542:	2064      	movs	r0, #100	@ 0x64
 8000544:	f000 fb20 	bl	8000b88 <HAL_Delay>
	  if (atomic_is_lock_free(&write_index))
 8000548:	e7cc      	b.n	80004e4 <main+0x20>
 800054a:	bf00      	nop
 800054c:	20000028 	.word	0x20000028
 8000550:	20000248 	.word	0x20000248
 8000554:	200000b8 	.word	0x200000b8

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	@ 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0320 	add.w	r3, r7, #32
 8000562:	2230      	movs	r2, #48	@ 0x30
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f002 f978 	bl	800285c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057c:	2300      	movs	r3, #0
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	4b29      	ldr	r3, [pc, #164]	@ (8000628 <SystemClock_Config+0xd0>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000584:	4a28      	ldr	r2, [pc, #160]	@ (8000628 <SystemClock_Config+0xd0>)
 8000586:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800058a:	6413      	str	r3, [r2, #64]	@ 0x40
 800058c:	4b26      	ldr	r3, [pc, #152]	@ (8000628 <SystemClock_Config+0xd0>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000590:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	4b23      	ldr	r3, [pc, #140]	@ (800062c <SystemClock_Config+0xd4>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005a4:	4a21      	ldr	r2, [pc, #132]	@ (800062c <SystemClock_Config+0xd4>)
 80005a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4b1f      	ldr	r3, [pc, #124]	@ (800062c <SystemClock_Config+0xd4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b8:	2302      	movs	r3, #2
 80005ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005bc:	2301      	movs	r3, #1
 80005be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c0:	2310      	movs	r3, #16
 80005c2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c4:	2302      	movs	r3, #2
 80005c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c8:	2300      	movs	r3, #0
 80005ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005cc:	2310      	movs	r3, #16
 80005ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005d0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005d6:	2304      	movs	r3, #4
 80005d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005da:	2307      	movs	r3, #7
 80005dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005de:	f107 0320 	add.w	r3, r7, #32
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 fda4 	bl	8001130 <HAL_RCC_OscConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005ee:	f000 f947 	bl	8000880 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f2:	230f      	movs	r3, #15
 80005f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f6:	2302      	movs	r3, #2
 80005f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000602:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2102      	movs	r1, #2
 800060e:	4618      	mov	r0, r3
 8000610:	f001 f806 	bl	8001620 <HAL_RCC_ClockConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800061a:	f000 f931 	bl	8000880 <Error_Handler>
  }
}
 800061e:	bf00      	nop
 8000620:	3750      	adds	r7, #80	@ 0x50
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000

08000630 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000644:	463b      	mov	r3, r7
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800064c:	4b1d      	ldr	r3, [pc, #116]	@ (80006c4 <MX_TIM2_Init+0x94>)
 800064e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000652:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83999;
 8000654:	4b1b      	ldr	r3, [pc, #108]	@ (80006c4 <MX_TIM2_Init+0x94>)
 8000656:	4a1c      	ldr	r2, [pc, #112]	@ (80006c8 <MX_TIM2_Init+0x98>)
 8000658:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800065a:	4b1a      	ldr	r3, [pc, #104]	@ (80006c4 <MX_TIM2_Init+0x94>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 8000660:	4b18      	ldr	r3, [pc, #96]	@ (80006c4 <MX_TIM2_Init+0x94>)
 8000662:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000666:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000668:	4b16      	ldr	r3, [pc, #88]	@ (80006c4 <MX_TIM2_Init+0x94>)
 800066a:	2200      	movs	r2, #0
 800066c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800066e:	4b15      	ldr	r3, [pc, #84]	@ (80006c4 <MX_TIM2_Init+0x94>)
 8000670:	2280      	movs	r2, #128	@ 0x80
 8000672:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000674:	4813      	ldr	r0, [pc, #76]	@ (80006c4 <MX_TIM2_Init+0x94>)
 8000676:	f001 f9f3 	bl	8001a60 <HAL_TIM_Base_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000680:	f000 f8fe 	bl	8000880 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000684:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000688:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800068a:	f107 0308 	add.w	r3, r7, #8
 800068e:	4619      	mov	r1, r3
 8000690:	480c      	ldr	r0, [pc, #48]	@ (80006c4 <MX_TIM2_Init+0x94>)
 8000692:	f001 fb87 	bl	8001da4 <HAL_TIM_ConfigClockSource>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800069c:	f000 f8f0 	bl	8000880 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006a0:	2300      	movs	r3, #0
 80006a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a4:	2300      	movs	r3, #0
 80006a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006a8:	463b      	mov	r3, r7
 80006aa:	4619      	mov	r1, r3
 80006ac:	4805      	ldr	r0, [pc, #20]	@ (80006c4 <MX_TIM2_Init+0x94>)
 80006ae:	f001 fd8f 	bl	80021d0 <HAL_TIMEx_MasterConfigSynchronization>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80006b8:	f000 f8e2 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006bc:	bf00      	nop
 80006be:	3718      	adds	r7, #24
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000028 	.word	0x20000028
 80006c8:	0001481f 	.word	0x0001481f

080006cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d0:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <MX_USART2_UART_Init+0x4c>)
 80006d2:	4a12      	ldr	r2, [pc, #72]	@ (800071c <MX_USART2_UART_Init+0x50>)
 80006d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006d6:	4b10      	ldr	r3, [pc, #64]	@ (8000718 <MX_USART2_UART_Init+0x4c>)
 80006d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006de:	4b0e      	ldr	r3, [pc, #56]	@ (8000718 <MX_USART2_UART_Init+0x4c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <MX_USART2_UART_Init+0x4c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000718 <MX_USART2_UART_Init+0x4c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f0:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <MX_USART2_UART_Init+0x4c>)
 80006f2:	220c      	movs	r2, #12
 80006f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f6:	4b08      	ldr	r3, [pc, #32]	@ (8000718 <MX_USART2_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006fc:	4b06      	ldr	r3, [pc, #24]	@ (8000718 <MX_USART2_UART_Init+0x4c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000702:	4805      	ldr	r0, [pc, #20]	@ (8000718 <MX_USART2_UART_Init+0x4c>)
 8000704:	f001 fde6 	bl	80022d4 <HAL_UART_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800070e:	f000 f8b7 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000070 	.word	0x20000070
 800071c:	40004400 	.word	0x40004400

08000720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08a      	sub	sp, #40	@ 0x28
 8000724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
 800073a:	4b2d      	ldr	r3, [pc, #180]	@ (80007f0 <MX_GPIO_Init+0xd0>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	4a2c      	ldr	r2, [pc, #176]	@ (80007f0 <MX_GPIO_Init+0xd0>)
 8000740:	f043 0304 	orr.w	r3, r3, #4
 8000744:	6313      	str	r3, [r2, #48]	@ 0x30
 8000746:	4b2a      	ldr	r3, [pc, #168]	@ (80007f0 <MX_GPIO_Init+0xd0>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	f003 0304 	and.w	r3, r3, #4
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	4b26      	ldr	r3, [pc, #152]	@ (80007f0 <MX_GPIO_Init+0xd0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	4a25      	ldr	r2, [pc, #148]	@ (80007f0 <MX_GPIO_Init+0xd0>)
 800075c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000760:	6313      	str	r3, [r2, #48]	@ 0x30
 8000762:	4b23      	ldr	r3, [pc, #140]	@ (80007f0 <MX_GPIO_Init+0xd0>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	4b1f      	ldr	r3, [pc, #124]	@ (80007f0 <MX_GPIO_Init+0xd0>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	4a1e      	ldr	r2, [pc, #120]	@ (80007f0 <MX_GPIO_Init+0xd0>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6313      	str	r3, [r2, #48]	@ 0x30
 800077e:	4b1c      	ldr	r3, [pc, #112]	@ (80007f0 <MX_GPIO_Init+0xd0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b18      	ldr	r3, [pc, #96]	@ (80007f0 <MX_GPIO_Init+0xd0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a17      	ldr	r2, [pc, #92]	@ (80007f0 <MX_GPIO_Init+0xd0>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b15      	ldr	r3, [pc, #84]	@ (80007f0 <MX_GPIO_Init+0xd0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2120      	movs	r1, #32
 80007aa:	4812      	ldr	r0, [pc, #72]	@ (80007f4 <MX_GPIO_Init+0xd4>)
 80007ac:	f000 fca6 	bl	80010fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007b6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	4619      	mov	r1, r3
 80007c6:	480c      	ldr	r0, [pc, #48]	@ (80007f8 <MX_GPIO_Init+0xd8>)
 80007c8:	f000 fb14 	bl	8000df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007cc:	2320      	movs	r3, #32
 80007ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d0:	2301      	movs	r3, #1
 80007d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d8:	2300      	movs	r3, #0
 80007da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	4619      	mov	r1, r3
 80007e2:	4804      	ldr	r0, [pc, #16]	@ (80007f4 <MX_GPIO_Init+0xd4>)
 80007e4:	f000 fb06 	bl	8000df4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007e8:	bf00      	nop
 80007ea:	3728      	adds	r7, #40	@ 0x28
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40020000 	.word	0x40020000
 80007f8:	40020800 	.word	0x40020800

080007fc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80007fc:	b480      	push	{r7}
 80007fe:	b089      	sub	sp, #36	@ 0x24
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800080c:	d12e      	bne.n	800086c <HAL_TIM_PeriodElapsedCallback+0x70>
    	// Interrupt writes 1 if within bounds
    	// Only write to one element at a time in the interrupt
		if (atomic_is_lock_free(&write_index))
		{
			int local_index = atomic_load(&write_index);  // Load the index atomically
 800080e:	4b1a      	ldr	r3, [pc, #104]	@ (8000878 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000810:	61fb      	str	r3, [r7, #28]
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	f3bf 8f5b 	dmb	ish
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f3bf 8f5b 	dmb	ish
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	693b      	ldr	r3, [r7, #16]
 8000822:	61bb      	str	r3, [r7, #24]

			// Interrupt writes 1 if within bounds
			if (local_index < ARRAY_SIZE)
 8000824:	69bb      	ldr	r3, [r7, #24]
 8000826:	2b63      	cmp	r3, #99	@ 0x63
 8000828:	dc11      	bgt.n	800084e <HAL_TIM_PeriodElapsedCallback+0x52>
			{
				shared_array[local_index] = 2;
 800082a:	4a14      	ldr	r2, [pc, #80]	@ (800087c <HAL_TIM_PeriodElapsedCallback+0x80>)
 800082c:	69bb      	ldr	r3, [r7, #24]
 800082e:	2102      	movs	r1, #2
 8000830:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				atomic_fetch_add(&write_index, 1);  // Increment the index atomically
 8000834:	4b10      	ldr	r3, [pc, #64]	@ (8000878 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000836:	f3bf 8f5b 	dmb	ish
 800083a:	e853 1f00 	ldrex	r1, [r3]
 800083e:	f101 0101 	add.w	r1, r1, #1
 8000842:	e843 1200 	strex	r2, r1, [r3]
 8000846:	2a00      	cmp	r2, #0
 8000848:	d1f7      	bne.n	800083a <HAL_TIM_PeriodElapsedCallback+0x3e>
 800084a:	f3bf 8f5b 	dmb	ish
			}

			// Reset the index if it reaches the end (circular buffer)
			if (local_index >= ARRAY_SIZE - 1)
 800084e:	69bb      	ldr	r3, [r7, #24]
 8000850:	2b62      	cmp	r3, #98	@ 0x62
 8000852:	dd0b      	ble.n	800086c <HAL_TIM_PeriodElapsedCallback+0x70>
			{
				atomic_store(&write_index, 0);  // Reset to 0 atomically
 8000854:	4b08      	ldr	r3, [pc, #32]	@ (8000878 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	461a      	mov	r2, r3
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	f3bf 8f5b 	dmb	ish
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	f3bf 8f5b 	dmb	ish

			}
		}

    }
}
 800086c:	bf00      	nop
 800086e:	3724      	adds	r7, #36	@ 0x24
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	20000248 	.word	0x20000248
 800087c:	200000b8 	.word	0x200000b8

08000880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000884:	b672      	cpsid	i
}
 8000886:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <Error_Handler+0x8>

0800088c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b10      	ldr	r3, [pc, #64]	@ (80008d8 <HAL_MspInit+0x4c>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800089a:	4a0f      	ldr	r2, [pc, #60]	@ (80008d8 <HAL_MspInit+0x4c>)
 800089c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80008a2:	4b0d      	ldr	r3, [pc, #52]	@ (80008d8 <HAL_MspInit+0x4c>)
 80008a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	4b09      	ldr	r3, [pc, #36]	@ (80008d8 <HAL_MspInit+0x4c>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b6:	4a08      	ldr	r2, [pc, #32]	@ (80008d8 <HAL_MspInit+0x4c>)
 80008b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80008be:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <HAL_MspInit+0x4c>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008ca:	2007      	movs	r0, #7
 80008cc:	f000 fa50 	bl	8000d70 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d0:	bf00      	nop
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40023800 	.word	0x40023800

080008dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80008ec:	d115      	bne.n	800091a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <HAL_TIM_Base_MspInit+0x48>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f6:	4a0b      	ldr	r2, [pc, #44]	@ (8000924 <HAL_TIM_Base_MspInit+0x48>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80008fe:	4b09      	ldr	r3, [pc, #36]	@ (8000924 <HAL_TIM_Base_MspInit+0x48>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	2100      	movs	r1, #0
 800090e:	201c      	movs	r0, #28
 8000910:	f000 fa39 	bl	8000d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000914:	201c      	movs	r0, #28
 8000916:	f000 fa52 	bl	8000dbe <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800091a:	bf00      	nop
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800

08000928 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08a      	sub	sp, #40	@ 0x28
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a19      	ldr	r2, [pc, #100]	@ (80009ac <HAL_UART_MspInit+0x84>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d12b      	bne.n	80009a2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	4b18      	ldr	r3, [pc, #96]	@ (80009b0 <HAL_UART_MspInit+0x88>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000952:	4a17      	ldr	r2, [pc, #92]	@ (80009b0 <HAL_UART_MspInit+0x88>)
 8000954:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000958:	6413      	str	r3, [r2, #64]	@ 0x40
 800095a:	4b15      	ldr	r3, [pc, #84]	@ (80009b0 <HAL_UART_MspInit+0x88>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	4b11      	ldr	r3, [pc, #68]	@ (80009b0 <HAL_UART_MspInit+0x88>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	4a10      	ldr	r2, [pc, #64]	@ (80009b0 <HAL_UART_MspInit+0x88>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6313      	str	r3, [r2, #48]	@ 0x30
 8000976:	4b0e      	ldr	r3, [pc, #56]	@ (80009b0 <HAL_UART_MspInit+0x88>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000982:	230c      	movs	r3, #12
 8000984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	2302      	movs	r3, #2
 8000988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000992:	2307      	movs	r3, #7
 8000994:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	4805      	ldr	r0, [pc, #20]	@ (80009b4 <HAL_UART_MspInit+0x8c>)
 800099e:	f000 fa29 	bl	8000df4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80009a2:	bf00      	nop
 80009a4:	3728      	adds	r7, #40	@ 0x28
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40004400 	.word	0x40004400
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40020000 	.word	0x40020000

080009b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <NMI_Handler+0x4>

080009c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <HardFault_Handler+0x4>

080009c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <MemManage_Handler+0x4>

080009d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <BusFault_Handler+0x4>

080009d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <UsageFault_Handler+0x4>

080009e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a0e:	f000 f89b 	bl	8000b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a1c:	4802      	ldr	r0, [pc, #8]	@ (8000a28 <TIM2_IRQHandler+0x10>)
 8000a1e:	f001 f8d1 	bl	8001bc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000028 	.word	0x20000028

08000a2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a30:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <SystemInit+0x20>)
 8000a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a36:	4a05      	ldr	r2, [pc, #20]	@ (8000a4c <SystemInit+0x20>)
 8000a38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a54:	f7ff ffea 	bl	8000a2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a58:	480c      	ldr	r0, [pc, #48]	@ (8000a8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a5a:	490d      	ldr	r1, [pc, #52]	@ (8000a90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a60:	e002      	b.n	8000a68 <LoopCopyDataInit>

08000a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a66:	3304      	adds	r3, #4

08000a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a6c:	d3f9      	bcc.n	8000a62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a70:	4c0a      	ldr	r4, [pc, #40]	@ (8000a9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a74:	e001      	b.n	8000a7a <LoopFillZerobss>

08000a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a78:	3204      	adds	r2, #4

08000a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a7c:	d3fb      	bcc.n	8000a76 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000a7e:	f001 fef5 	bl	800286c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a82:	f7ff fd1f 	bl	80004c4 <main>
  bx  lr    
 8000a86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a88:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a90:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a94:	080028f4 	.word	0x080028f4
  ldr r2, =_sbss
 8000a98:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a9c:	20000250 	.word	0x20000250

08000aa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa0:	e7fe      	b.n	8000aa0 <ADC_IRQHandler>
	...

08000aa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae4 <HAL_Init+0x40>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae4 <HAL_Init+0x40>)
 8000aae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ab2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae4 <HAL_Init+0x40>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae4 <HAL_Init+0x40>)
 8000aba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000abe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac0:	4b08      	ldr	r3, [pc, #32]	@ (8000ae4 <HAL_Init+0x40>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a07      	ldr	r2, [pc, #28]	@ (8000ae4 <HAL_Init+0x40>)
 8000ac6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000aca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000acc:	2003      	movs	r0, #3
 8000ace:	f000 f94f 	bl	8000d70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f000 f808 	bl	8000ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad8:	f7ff fed8 	bl	800088c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000adc:	2300      	movs	r3, #0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40023c00 	.word	0x40023c00

08000ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af0:	4b12      	ldr	r3, [pc, #72]	@ (8000b3c <HAL_InitTick+0x54>)
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	4b12      	ldr	r3, [pc, #72]	@ (8000b40 <HAL_InitTick+0x58>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	4619      	mov	r1, r3
 8000afa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 f967 	bl	8000dda <HAL_SYSTICK_Config>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	e00e      	b.n	8000b34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b0f      	cmp	r3, #15
 8000b1a:	d80a      	bhi.n	8000b32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	6879      	ldr	r1, [r7, #4]
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295
 8000b24:	f000 f92f 	bl	8000d86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b28:	4a06      	ldr	r2, [pc, #24]	@ (8000b44 <HAL_InitTick+0x5c>)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	e000      	b.n	8000b34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000000 	.word	0x20000000
 8000b40:	20000008 	.word	0x20000008
 8000b44:	20000004 	.word	0x20000004

08000b48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	@ (8000b68 <HAL_IncTick+0x20>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	461a      	mov	r2, r3
 8000b52:	4b06      	ldr	r3, [pc, #24]	@ (8000b6c <HAL_IncTick+0x24>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4413      	add	r3, r2
 8000b58:	4a04      	ldr	r2, [pc, #16]	@ (8000b6c <HAL_IncTick+0x24>)
 8000b5a:	6013      	str	r3, [r2, #0]
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	20000008 	.word	0x20000008
 8000b6c:	2000024c 	.word	0x2000024c

08000b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  return uwTick;
 8000b74:	4b03      	ldr	r3, [pc, #12]	@ (8000b84 <HAL_GetTick+0x14>)
 8000b76:	681b      	ldr	r3, [r3, #0]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	2000024c 	.word	0x2000024c

08000b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b90:	f7ff ffee 	bl	8000b70 <HAL_GetTick>
 8000b94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ba0:	d005      	beq.n	8000bae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bcc <HAL_Delay+0x44>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	4413      	add	r3, r2
 8000bac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bae:	bf00      	nop
 8000bb0:	f7ff ffde 	bl	8000b70 <HAL_GetTick>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	68fa      	ldr	r2, [r7, #12]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d8f7      	bhi.n	8000bb0 <HAL_Delay+0x28>
  {
  }
}
 8000bc0:	bf00      	nop
 8000bc2:	bf00      	nop
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000008 	.word	0x20000008

08000bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c14 <__NVIC_SetPriorityGrouping+0x44>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be6:	68ba      	ldr	r2, [r7, #8]
 8000be8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bec:	4013      	ands	r3, r2
 8000bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c02:	4a04      	ldr	r2, [pc, #16]	@ (8000c14 <__NVIC_SetPriorityGrouping+0x44>)
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	60d3      	str	r3, [r2, #12]
}
 8000c08:	bf00      	nop
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c1c:	4b04      	ldr	r3, [pc, #16]	@ (8000c30 <__NVIC_GetPriorityGrouping+0x18>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	0a1b      	lsrs	r3, r3, #8
 8000c22:	f003 0307 	and.w	r3, r3, #7
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	db0b      	blt.n	8000c5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	f003 021f 	and.w	r2, r3, #31
 8000c4c:	4907      	ldr	r1, [pc, #28]	@ (8000c6c <__NVIC_EnableIRQ+0x38>)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	095b      	lsrs	r3, r3, #5
 8000c54:	2001      	movs	r0, #1
 8000c56:	fa00 f202 	lsl.w	r2, r0, r2
 8000c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000e100 	.word	0xe000e100

08000c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	6039      	str	r1, [r7, #0]
 8000c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	db0a      	blt.n	8000c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	490c      	ldr	r1, [pc, #48]	@ (8000cbc <__NVIC_SetPriority+0x4c>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	0112      	lsls	r2, r2, #4
 8000c90:	b2d2      	uxtb	r2, r2
 8000c92:	440b      	add	r3, r1
 8000c94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c98:	e00a      	b.n	8000cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	4908      	ldr	r1, [pc, #32]	@ (8000cc0 <__NVIC_SetPriority+0x50>)
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	f003 030f 	and.w	r3, r3, #15
 8000ca6:	3b04      	subs	r3, #4
 8000ca8:	0112      	lsls	r2, r2, #4
 8000caa:	b2d2      	uxtb	r2, r2
 8000cac:	440b      	add	r3, r1
 8000cae:	761a      	strb	r2, [r3, #24]
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000e100 	.word	0xe000e100
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b089      	sub	sp, #36	@ 0x24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	f1c3 0307 	rsb	r3, r3, #7
 8000cde:	2b04      	cmp	r3, #4
 8000ce0:	bf28      	it	cs
 8000ce2:	2304      	movcs	r3, #4
 8000ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3304      	adds	r3, #4
 8000cea:	2b06      	cmp	r3, #6
 8000cec:	d902      	bls.n	8000cf4 <NVIC_EncodePriority+0x30>
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3b03      	subs	r3, #3
 8000cf2:	e000      	b.n	8000cf6 <NVIC_EncodePriority+0x32>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43da      	mvns	r2, r3
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	401a      	ands	r2, r3
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	fa01 f303 	lsl.w	r3, r1, r3
 8000d16:	43d9      	mvns	r1, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	4313      	orrs	r3, r2
         );
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3724      	adds	r7, #36	@ 0x24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
	...

08000d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d3c:	d301      	bcc.n	8000d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e00f      	b.n	8000d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d42:	4a0a      	ldr	r2, [pc, #40]	@ (8000d6c <SysTick_Config+0x40>)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d4a:	210f      	movs	r1, #15
 8000d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d50:	f7ff ff8e 	bl	8000c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d54:	4b05      	ldr	r3, [pc, #20]	@ (8000d6c <SysTick_Config+0x40>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d5a:	4b04      	ldr	r3, [pc, #16]	@ (8000d6c <SysTick_Config+0x40>)
 8000d5c:	2207      	movs	r2, #7
 8000d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	e000e010 	.word	0xe000e010

08000d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f7ff ff29 	bl	8000bd0 <__NVIC_SetPriorityGrouping>
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b086      	sub	sp, #24
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
 8000d92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d98:	f7ff ff3e 	bl	8000c18 <__NVIC_GetPriorityGrouping>
 8000d9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	68b9      	ldr	r1, [r7, #8]
 8000da2:	6978      	ldr	r0, [r7, #20]
 8000da4:	f7ff ff8e 	bl	8000cc4 <NVIC_EncodePriority>
 8000da8:	4602      	mov	r2, r0
 8000daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dae:	4611      	mov	r1, r2
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff5d 	bl	8000c70 <__NVIC_SetPriority>
}
 8000db6:	bf00      	nop
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ff31 	bl	8000c34 <__NVIC_EnableIRQ>
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff ffa2 	bl	8000d2c <SysTick_Config>
 8000de8:	4603      	mov	r3, r0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b089      	sub	sp, #36	@ 0x24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
 8000e0e:	e159      	b.n	80010c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e10:	2201      	movs	r2, #1
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	697a      	ldr	r2, [r7, #20]
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	f040 8148 	bne.w	80010be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 0303 	and.w	r3, r3, #3
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d005      	beq.n	8000e46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d130      	bne.n	8000ea8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	2203      	movs	r2, #3
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43db      	mvns	r3, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	68da      	ldr	r2, [r3, #12]
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	091b      	lsrs	r3, r3, #4
 8000e92:	f003 0201 	and.w	r2, r3, #1
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 0303 	and.w	r3, r3, #3
 8000eb0:	2b03      	cmp	r3, #3
 8000eb2:	d017      	beq.n	8000ee4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	689a      	ldr	r2, [r3, #8]
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 0303 	and.w	r3, r3, #3
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d123      	bne.n	8000f38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	08da      	lsrs	r2, r3, #3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3208      	adds	r2, #8
 8000ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	f003 0307 	and.w	r3, r3, #7
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	220f      	movs	r2, #15
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	691a      	ldr	r2, [r3, #16]
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	08da      	lsrs	r2, r3, #3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	3208      	adds	r2, #8
 8000f32:	69b9      	ldr	r1, [r7, #24]
 8000f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	2203      	movs	r2, #3
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 0203 	and.w	r2, r3, #3
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f000 80a2 	beq.w	80010be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	4b57      	ldr	r3, [pc, #348]	@ (80010dc <HAL_GPIO_Init+0x2e8>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f82:	4a56      	ldr	r2, [pc, #344]	@ (80010dc <HAL_GPIO_Init+0x2e8>)
 8000f84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f88:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f8a:	4b54      	ldr	r3, [pc, #336]	@ (80010dc <HAL_GPIO_Init+0x2e8>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f96:	4a52      	ldr	r2, [pc, #328]	@ (80010e0 <HAL_GPIO_Init+0x2ec>)
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	089b      	lsrs	r3, r3, #2
 8000f9c:	3302      	adds	r3, #2
 8000f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	f003 0303 	and.w	r3, r3, #3
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	220f      	movs	r2, #15
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a49      	ldr	r2, [pc, #292]	@ (80010e4 <HAL_GPIO_Init+0x2f0>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d019      	beq.n	8000ff6 <HAL_GPIO_Init+0x202>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a48      	ldr	r2, [pc, #288]	@ (80010e8 <HAL_GPIO_Init+0x2f4>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d013      	beq.n	8000ff2 <HAL_GPIO_Init+0x1fe>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a47      	ldr	r2, [pc, #284]	@ (80010ec <HAL_GPIO_Init+0x2f8>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d00d      	beq.n	8000fee <HAL_GPIO_Init+0x1fa>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a46      	ldr	r2, [pc, #280]	@ (80010f0 <HAL_GPIO_Init+0x2fc>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d007      	beq.n	8000fea <HAL_GPIO_Init+0x1f6>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a45      	ldr	r2, [pc, #276]	@ (80010f4 <HAL_GPIO_Init+0x300>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d101      	bne.n	8000fe6 <HAL_GPIO_Init+0x1f2>
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	e008      	b.n	8000ff8 <HAL_GPIO_Init+0x204>
 8000fe6:	2307      	movs	r3, #7
 8000fe8:	e006      	b.n	8000ff8 <HAL_GPIO_Init+0x204>
 8000fea:	2303      	movs	r3, #3
 8000fec:	e004      	b.n	8000ff8 <HAL_GPIO_Init+0x204>
 8000fee:	2302      	movs	r3, #2
 8000ff0:	e002      	b.n	8000ff8 <HAL_GPIO_Init+0x204>
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e000      	b.n	8000ff8 <HAL_GPIO_Init+0x204>
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	69fa      	ldr	r2, [r7, #28]
 8000ffa:	f002 0203 	and.w	r2, r2, #3
 8000ffe:	0092      	lsls	r2, r2, #2
 8001000:	4093      	lsls	r3, r2
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4313      	orrs	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001008:	4935      	ldr	r1, [pc, #212]	@ (80010e0 <HAL_GPIO_Init+0x2ec>)
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	089b      	lsrs	r3, r3, #2
 800100e:	3302      	adds	r3, #2
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001016:	4b38      	ldr	r3, [pc, #224]	@ (80010f8 <HAL_GPIO_Init+0x304>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	43db      	mvns	r3, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4013      	ands	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800103a:	4a2f      	ldr	r2, [pc, #188]	@ (80010f8 <HAL_GPIO_Init+0x304>)
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001040:	4b2d      	ldr	r3, [pc, #180]	@ (80010f8 <HAL_GPIO_Init+0x304>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001064:	4a24      	ldr	r2, [pc, #144]	@ (80010f8 <HAL_GPIO_Init+0x304>)
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800106a:	4b23      	ldr	r3, [pc, #140]	@ (80010f8 <HAL_GPIO_Init+0x304>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800108e:	4a1a      	ldr	r2, [pc, #104]	@ (80010f8 <HAL_GPIO_Init+0x304>)
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001094:	4b18      	ldr	r3, [pc, #96]	@ (80010f8 <HAL_GPIO_Init+0x304>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010b8:	4a0f      	ldr	r2, [pc, #60]	@ (80010f8 <HAL_GPIO_Init+0x304>)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3301      	adds	r3, #1
 80010c2:	61fb      	str	r3, [r7, #28]
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	2b0f      	cmp	r3, #15
 80010c8:	f67f aea2 	bls.w	8000e10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	3724      	adds	r7, #36	@ 0x24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40013800 	.word	0x40013800
 80010e4:	40020000 	.word	0x40020000
 80010e8:	40020400 	.word	0x40020400
 80010ec:	40020800 	.word	0x40020800
 80010f0:	40020c00 	.word	0x40020c00
 80010f4:	40021000 	.word	0x40021000
 80010f8:	40013c00 	.word	0x40013c00

080010fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	807b      	strh	r3, [r7, #2]
 8001108:	4613      	mov	r3, r2
 800110a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800110c:	787b      	ldrb	r3, [r7, #1]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001112:	887a      	ldrh	r2, [r7, #2]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001118:	e003      	b.n	8001122 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800111a:	887b      	ldrh	r3, [r7, #2]
 800111c:	041a      	lsls	r2, r3, #16
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	619a      	str	r2, [r3, #24]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e267      	b.n	8001612 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	2b00      	cmp	r3, #0
 800114c:	d075      	beq.n	800123a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800114e:	4b88      	ldr	r3, [pc, #544]	@ (8001370 <HAL_RCC_OscConfig+0x240>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f003 030c 	and.w	r3, r3, #12
 8001156:	2b04      	cmp	r3, #4
 8001158:	d00c      	beq.n	8001174 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800115a:	4b85      	ldr	r3, [pc, #532]	@ (8001370 <HAL_RCC_OscConfig+0x240>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001162:	2b08      	cmp	r3, #8
 8001164:	d112      	bne.n	800118c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001166:	4b82      	ldr	r3, [pc, #520]	@ (8001370 <HAL_RCC_OscConfig+0x240>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800116e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001172:	d10b      	bne.n	800118c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001174:	4b7e      	ldr	r3, [pc, #504]	@ (8001370 <HAL_RCC_OscConfig+0x240>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d05b      	beq.n	8001238 <HAL_RCC_OscConfig+0x108>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d157      	bne.n	8001238 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e242      	b.n	8001612 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001194:	d106      	bne.n	80011a4 <HAL_RCC_OscConfig+0x74>
 8001196:	4b76      	ldr	r3, [pc, #472]	@ (8001370 <HAL_RCC_OscConfig+0x240>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a75      	ldr	r2, [pc, #468]	@ (8001370 <HAL_RCC_OscConfig+0x240>)
 800119c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011a0:	6013      	str	r3, [r2, #0]
 80011a2:	e01d      	b.n	80011e0 <HAL_RCC_OscConfig+0xb0>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011ac:	d10c      	bne.n	80011c8 <HAL_RCC_OscConfig+0x98>
 80011ae:	4b70      	ldr	r3, [pc, #448]	@ (8001370 <HAL_RCC_OscConfig+0x240>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a6f      	ldr	r2, [pc, #444]	@ (8001370 <HAL_RCC_OscConfig+0x240>)
 80011b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	4b6d      	ldr	r3, [pc, #436]	@ (8001370 <HAL_RCC_OscConfig+0x240>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a6c      	ldr	r2, [pc, #432]	@ (8001370 <HAL_RCC_OscConfig+0x240>)
 80011c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011c4:	6013      	str	r3, [r2, #0]
 80011c6:	e00b      	b.n	80011e0 <HAL_RCC_OscConfig+0xb0>
 80011c8:	4b69      	ldr	r3, [pc, #420]	@ (8001370 <HAL_RCC_OscConfig+0x240>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a68      	ldr	r2, [pc, #416]	@ (8001370 <HAL_RCC_OscConfig+0x240>)
 80011ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011d2:	6013      	str	r3, [r2, #0]
 80011d4:	4b66      	ldr	r3, [pc, #408]	@ (8001370 <HAL_RCC_OscConfig+0x240>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a65      	ldr	r2, [pc, #404]	@ (8001370 <HAL_RCC_OscConfig+0x240>)
 80011da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d013      	beq.n	8001210 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e8:	f7ff fcc2 	bl	8000b70 <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011f0:	f7ff fcbe 	bl	8000b70 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b64      	cmp	r3, #100	@ 0x64
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e207      	b.n	8001612 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001202:	4b5b      	ldr	r3, [pc, #364]	@ (8001370 <HAL_RCC_OscConfig+0x240>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0f0      	beq.n	80011f0 <HAL_RCC_OscConfig+0xc0>
 800120e:	e014      	b.n	800123a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001210:	f7ff fcae 	bl	8000b70 <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001216:	e008      	b.n	800122a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001218:	f7ff fcaa 	bl	8000b70 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b64      	cmp	r3, #100	@ 0x64
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e1f3      	b.n	8001612 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800122a:	4b51      	ldr	r3, [pc, #324]	@ (8001370 <HAL_RCC_OscConfig+0x240>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1f0      	bne.n	8001218 <HAL_RCC_OscConfig+0xe8>
 8001236:	e000      	b.n	800123a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001238:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d063      	beq.n	800130e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001246:	4b4a      	ldr	r3, [pc, #296]	@ (8001370 <HAL_RCC_OscConfig+0x240>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 030c 	and.w	r3, r3, #12
 800124e:	2b00      	cmp	r3, #0
 8001250:	d00b      	beq.n	800126a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001252:	4b47      	ldr	r3, [pc, #284]	@ (8001370 <HAL_RCC_OscConfig+0x240>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800125a:	2b08      	cmp	r3, #8
 800125c:	d11c      	bne.n	8001298 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800125e:	4b44      	ldr	r3, [pc, #272]	@ (8001370 <HAL_RCC_OscConfig+0x240>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d116      	bne.n	8001298 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800126a:	4b41      	ldr	r3, [pc, #260]	@ (8001370 <HAL_RCC_OscConfig+0x240>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d005      	beq.n	8001282 <HAL_RCC_OscConfig+0x152>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d001      	beq.n	8001282 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e1c7      	b.n	8001612 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001282:	4b3b      	ldr	r3, [pc, #236]	@ (8001370 <HAL_RCC_OscConfig+0x240>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	691b      	ldr	r3, [r3, #16]
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	4937      	ldr	r1, [pc, #220]	@ (8001370 <HAL_RCC_OscConfig+0x240>)
 8001292:	4313      	orrs	r3, r2
 8001294:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001296:	e03a      	b.n	800130e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d020      	beq.n	80012e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012a0:	4b34      	ldr	r3, [pc, #208]	@ (8001374 <HAL_RCC_OscConfig+0x244>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a6:	f7ff fc63 	bl	8000b70 <HAL_GetTick>
 80012aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ac:	e008      	b.n	80012c0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ae:	f7ff fc5f 	bl	8000b70 <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d901      	bls.n	80012c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e1a8      	b.n	8001612 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001370 <HAL_RCC_OscConfig+0x240>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d0f0      	beq.n	80012ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012cc:	4b28      	ldr	r3, [pc, #160]	@ (8001370 <HAL_RCC_OscConfig+0x240>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	691b      	ldr	r3, [r3, #16]
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	4925      	ldr	r1, [pc, #148]	@ (8001370 <HAL_RCC_OscConfig+0x240>)
 80012dc:	4313      	orrs	r3, r2
 80012de:	600b      	str	r3, [r1, #0]
 80012e0:	e015      	b.n	800130e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012e2:	4b24      	ldr	r3, [pc, #144]	@ (8001374 <HAL_RCC_OscConfig+0x244>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e8:	f7ff fc42 	bl	8000b70 <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012f0:	f7ff fc3e 	bl	8000b70 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e187      	b.n	8001612 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001302:	4b1b      	ldr	r3, [pc, #108]	@ (8001370 <HAL_RCC_OscConfig+0x240>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1f0      	bne.n	80012f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	2b00      	cmp	r3, #0
 8001318:	d036      	beq.n	8001388 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d016      	beq.n	8001350 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001322:	4b15      	ldr	r3, [pc, #84]	@ (8001378 <HAL_RCC_OscConfig+0x248>)
 8001324:	2201      	movs	r2, #1
 8001326:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001328:	f7ff fc22 	bl	8000b70 <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001330:	f7ff fc1e 	bl	8000b70 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e167      	b.n	8001612 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001342:	4b0b      	ldr	r3, [pc, #44]	@ (8001370 <HAL_RCC_OscConfig+0x240>)
 8001344:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d0f0      	beq.n	8001330 <HAL_RCC_OscConfig+0x200>
 800134e:	e01b      	b.n	8001388 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001350:	4b09      	ldr	r3, [pc, #36]	@ (8001378 <HAL_RCC_OscConfig+0x248>)
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001356:	f7ff fc0b 	bl	8000b70 <HAL_GetTick>
 800135a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800135c:	e00e      	b.n	800137c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800135e:	f7ff fc07 	bl	8000b70 <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d907      	bls.n	800137c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e150      	b.n	8001612 <HAL_RCC_OscConfig+0x4e2>
 8001370:	40023800 	.word	0x40023800
 8001374:	42470000 	.word	0x42470000
 8001378:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800137c:	4b88      	ldr	r3, [pc, #544]	@ (80015a0 <HAL_RCC_OscConfig+0x470>)
 800137e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d1ea      	bne.n	800135e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0304 	and.w	r3, r3, #4
 8001390:	2b00      	cmp	r3, #0
 8001392:	f000 8097 	beq.w	80014c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001396:	2300      	movs	r3, #0
 8001398:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800139a:	4b81      	ldr	r3, [pc, #516]	@ (80015a0 <HAL_RCC_OscConfig+0x470>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d10f      	bne.n	80013c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	4b7d      	ldr	r3, [pc, #500]	@ (80015a0 <HAL_RCC_OscConfig+0x470>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ae:	4a7c      	ldr	r2, [pc, #496]	@ (80015a0 <HAL_RCC_OscConfig+0x470>)
 80013b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013b6:	4b7a      	ldr	r3, [pc, #488]	@ (80015a0 <HAL_RCC_OscConfig+0x470>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013c2:	2301      	movs	r3, #1
 80013c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c6:	4b77      	ldr	r3, [pc, #476]	@ (80015a4 <HAL_RCC_OscConfig+0x474>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d118      	bne.n	8001404 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013d2:	4b74      	ldr	r3, [pc, #464]	@ (80015a4 <HAL_RCC_OscConfig+0x474>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a73      	ldr	r2, [pc, #460]	@ (80015a4 <HAL_RCC_OscConfig+0x474>)
 80013d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013de:	f7ff fbc7 	bl	8000b70 <HAL_GetTick>
 80013e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e4:	e008      	b.n	80013f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013e6:	f7ff fbc3 	bl	8000b70 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e10c      	b.n	8001612 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f8:	4b6a      	ldr	r3, [pc, #424]	@ (80015a4 <HAL_RCC_OscConfig+0x474>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0f0      	beq.n	80013e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d106      	bne.n	800141a <HAL_RCC_OscConfig+0x2ea>
 800140c:	4b64      	ldr	r3, [pc, #400]	@ (80015a0 <HAL_RCC_OscConfig+0x470>)
 800140e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001410:	4a63      	ldr	r2, [pc, #396]	@ (80015a0 <HAL_RCC_OscConfig+0x470>)
 8001412:	f043 0301 	orr.w	r3, r3, #1
 8001416:	6713      	str	r3, [r2, #112]	@ 0x70
 8001418:	e01c      	b.n	8001454 <HAL_RCC_OscConfig+0x324>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	2b05      	cmp	r3, #5
 8001420:	d10c      	bne.n	800143c <HAL_RCC_OscConfig+0x30c>
 8001422:	4b5f      	ldr	r3, [pc, #380]	@ (80015a0 <HAL_RCC_OscConfig+0x470>)
 8001424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001426:	4a5e      	ldr	r2, [pc, #376]	@ (80015a0 <HAL_RCC_OscConfig+0x470>)
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	6713      	str	r3, [r2, #112]	@ 0x70
 800142e:	4b5c      	ldr	r3, [pc, #368]	@ (80015a0 <HAL_RCC_OscConfig+0x470>)
 8001430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001432:	4a5b      	ldr	r2, [pc, #364]	@ (80015a0 <HAL_RCC_OscConfig+0x470>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6713      	str	r3, [r2, #112]	@ 0x70
 800143a:	e00b      	b.n	8001454 <HAL_RCC_OscConfig+0x324>
 800143c:	4b58      	ldr	r3, [pc, #352]	@ (80015a0 <HAL_RCC_OscConfig+0x470>)
 800143e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001440:	4a57      	ldr	r2, [pc, #348]	@ (80015a0 <HAL_RCC_OscConfig+0x470>)
 8001442:	f023 0301 	bic.w	r3, r3, #1
 8001446:	6713      	str	r3, [r2, #112]	@ 0x70
 8001448:	4b55      	ldr	r3, [pc, #340]	@ (80015a0 <HAL_RCC_OscConfig+0x470>)
 800144a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800144c:	4a54      	ldr	r2, [pc, #336]	@ (80015a0 <HAL_RCC_OscConfig+0x470>)
 800144e:	f023 0304 	bic.w	r3, r3, #4
 8001452:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d015      	beq.n	8001488 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800145c:	f7ff fb88 	bl	8000b70 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001462:	e00a      	b.n	800147a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001464:	f7ff fb84 	bl	8000b70 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001472:	4293      	cmp	r3, r2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e0cb      	b.n	8001612 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800147a:	4b49      	ldr	r3, [pc, #292]	@ (80015a0 <HAL_RCC_OscConfig+0x470>)
 800147c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d0ee      	beq.n	8001464 <HAL_RCC_OscConfig+0x334>
 8001486:	e014      	b.n	80014b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001488:	f7ff fb72 	bl	8000b70 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800148e:	e00a      	b.n	80014a6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001490:	f7ff fb6e 	bl	8000b70 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800149e:	4293      	cmp	r3, r2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e0b5      	b.n	8001612 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014a6:	4b3e      	ldr	r3, [pc, #248]	@ (80015a0 <HAL_RCC_OscConfig+0x470>)
 80014a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1ee      	bne.n	8001490 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80014b2:	7dfb      	ldrb	r3, [r7, #23]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d105      	bne.n	80014c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014b8:	4b39      	ldr	r3, [pc, #228]	@ (80015a0 <HAL_RCC_OscConfig+0x470>)
 80014ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014bc:	4a38      	ldr	r2, [pc, #224]	@ (80015a0 <HAL_RCC_OscConfig+0x470>)
 80014be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f000 80a1 	beq.w	8001610 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014ce:	4b34      	ldr	r3, [pc, #208]	@ (80015a0 <HAL_RCC_OscConfig+0x470>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f003 030c 	and.w	r3, r3, #12
 80014d6:	2b08      	cmp	r3, #8
 80014d8:	d05c      	beq.n	8001594 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d141      	bne.n	8001566 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e2:	4b31      	ldr	r3, [pc, #196]	@ (80015a8 <HAL_RCC_OscConfig+0x478>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e8:	f7ff fb42 	bl	8000b70 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014f0:	f7ff fb3e 	bl	8000b70 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e087      	b.n	8001612 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001502:	4b27      	ldr	r3, [pc, #156]	@ (80015a0 <HAL_RCC_OscConfig+0x470>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f0      	bne.n	80014f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	69da      	ldr	r2, [r3, #28]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a1b      	ldr	r3, [r3, #32]
 8001516:	431a      	orrs	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800151c:	019b      	lsls	r3, r3, #6
 800151e:	431a      	orrs	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001524:	085b      	lsrs	r3, r3, #1
 8001526:	3b01      	subs	r3, #1
 8001528:	041b      	lsls	r3, r3, #16
 800152a:	431a      	orrs	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001530:	061b      	lsls	r3, r3, #24
 8001532:	491b      	ldr	r1, [pc, #108]	@ (80015a0 <HAL_RCC_OscConfig+0x470>)
 8001534:	4313      	orrs	r3, r2
 8001536:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001538:	4b1b      	ldr	r3, [pc, #108]	@ (80015a8 <HAL_RCC_OscConfig+0x478>)
 800153a:	2201      	movs	r2, #1
 800153c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153e:	f7ff fb17 	bl	8000b70 <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001544:	e008      	b.n	8001558 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001546:	f7ff fb13 	bl	8000b70 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e05c      	b.n	8001612 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001558:	4b11      	ldr	r3, [pc, #68]	@ (80015a0 <HAL_RCC_OscConfig+0x470>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0f0      	beq.n	8001546 <HAL_RCC_OscConfig+0x416>
 8001564:	e054      	b.n	8001610 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001566:	4b10      	ldr	r3, [pc, #64]	@ (80015a8 <HAL_RCC_OscConfig+0x478>)
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156c:	f7ff fb00 	bl	8000b70 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001574:	f7ff fafc 	bl	8000b70 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e045      	b.n	8001612 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001586:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <HAL_RCC_OscConfig+0x470>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f0      	bne.n	8001574 <HAL_RCC_OscConfig+0x444>
 8001592:	e03d      	b.n	8001610 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d107      	bne.n	80015ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e038      	b.n	8001612 <HAL_RCC_OscConfig+0x4e2>
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40007000 	.word	0x40007000
 80015a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015ac:	4b1b      	ldr	r3, [pc, #108]	@ (800161c <HAL_RCC_OscConfig+0x4ec>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d028      	beq.n	800160c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d121      	bne.n	800160c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d11a      	bne.n	800160c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80015dc:	4013      	ands	r3, r2
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80015e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d111      	bne.n	800160c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015f2:	085b      	lsrs	r3, r3, #1
 80015f4:	3b01      	subs	r3, #1
 80015f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d107      	bne.n	800160c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001606:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001608:	429a      	cmp	r2, r3
 800160a:	d001      	beq.n	8001610 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e000      	b.n	8001612 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3718      	adds	r7, #24
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40023800 	.word	0x40023800

08001620 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d101      	bne.n	8001634 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e0cc      	b.n	80017ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001634:	4b68      	ldr	r3, [pc, #416]	@ (80017d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0307 	and.w	r3, r3, #7
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	429a      	cmp	r2, r3
 8001640:	d90c      	bls.n	800165c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001642:	4b65      	ldr	r3, [pc, #404]	@ (80017d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800164a:	4b63      	ldr	r3, [pc, #396]	@ (80017d8 <HAL_RCC_ClockConfig+0x1b8>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	429a      	cmp	r2, r3
 8001656:	d001      	beq.n	800165c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e0b8      	b.n	80017ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d020      	beq.n	80016aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0304 	and.w	r3, r3, #4
 8001670:	2b00      	cmp	r3, #0
 8001672:	d005      	beq.n	8001680 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001674:	4b59      	ldr	r3, [pc, #356]	@ (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	4a58      	ldr	r2, [pc, #352]	@ (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 800167a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800167e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0308 	and.w	r3, r3, #8
 8001688:	2b00      	cmp	r3, #0
 800168a:	d005      	beq.n	8001698 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800168c:	4b53      	ldr	r3, [pc, #332]	@ (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	4a52      	ldr	r2, [pc, #328]	@ (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 8001692:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001696:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001698:	4b50      	ldr	r3, [pc, #320]	@ (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	494d      	ldr	r1, [pc, #308]	@ (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d044      	beq.n	8001740 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d107      	bne.n	80016ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016be:	4b47      	ldr	r3, [pc, #284]	@ (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d119      	bne.n	80016fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e07f      	b.n	80017ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d003      	beq.n	80016de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016da:	2b03      	cmp	r3, #3
 80016dc:	d107      	bne.n	80016ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016de:	4b3f      	ldr	r3, [pc, #252]	@ (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d109      	bne.n	80016fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e06f      	b.n	80017ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ee:	4b3b      	ldr	r3, [pc, #236]	@ (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e067      	b.n	80017ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016fe:	4b37      	ldr	r3, [pc, #220]	@ (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f023 0203 	bic.w	r2, r3, #3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	4934      	ldr	r1, [pc, #208]	@ (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 800170c:	4313      	orrs	r3, r2
 800170e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001710:	f7ff fa2e 	bl	8000b70 <HAL_GetTick>
 8001714:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001716:	e00a      	b.n	800172e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001718:	f7ff fa2a 	bl	8000b70 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001726:	4293      	cmp	r3, r2
 8001728:	d901      	bls.n	800172e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e04f      	b.n	80017ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800172e:	4b2b      	ldr	r3, [pc, #172]	@ (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 020c 	and.w	r2, r3, #12
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	429a      	cmp	r2, r3
 800173e:	d1eb      	bne.n	8001718 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001740:	4b25      	ldr	r3, [pc, #148]	@ (80017d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	429a      	cmp	r2, r3
 800174c:	d20c      	bcs.n	8001768 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174e:	4b22      	ldr	r3, [pc, #136]	@ (80017d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001756:	4b20      	ldr	r3, [pc, #128]	@ (80017d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	429a      	cmp	r2, r3
 8001762:	d001      	beq.n	8001768 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e032      	b.n	80017ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	2b00      	cmp	r3, #0
 8001772:	d008      	beq.n	8001786 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001774:	4b19      	ldr	r3, [pc, #100]	@ (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	4916      	ldr	r1, [pc, #88]	@ (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	4313      	orrs	r3, r2
 8001784:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	2b00      	cmp	r3, #0
 8001790:	d009      	beq.n	80017a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001792:	4b12      	ldr	r3, [pc, #72]	@ (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	490e      	ldr	r1, [pc, #56]	@ (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017a6:	f000 f821 	bl	80017ec <HAL_RCC_GetSysClockFreq>
 80017aa:	4602      	mov	r2, r0
 80017ac:	4b0b      	ldr	r3, [pc, #44]	@ (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	091b      	lsrs	r3, r3, #4
 80017b2:	f003 030f 	and.w	r3, r3, #15
 80017b6:	490a      	ldr	r1, [pc, #40]	@ (80017e0 <HAL_RCC_ClockConfig+0x1c0>)
 80017b8:	5ccb      	ldrb	r3, [r1, r3]
 80017ba:	fa22 f303 	lsr.w	r3, r2, r3
 80017be:	4a09      	ldr	r2, [pc, #36]	@ (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 80017c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80017c2:	4b09      	ldr	r3, [pc, #36]	@ (80017e8 <HAL_RCC_ClockConfig+0x1c8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff f98e 	bl	8000ae8 <HAL_InitTick>

  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40023c00 	.word	0x40023c00
 80017dc:	40023800 	.word	0x40023800
 80017e0:	080028cc 	.word	0x080028cc
 80017e4:	20000000 	.word	0x20000000
 80017e8:	20000004 	.word	0x20000004

080017ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017f0:	b094      	sub	sp, #80	@ 0x50
 80017f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80017fc:	2300      	movs	r3, #0
 80017fe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001800:	2300      	movs	r3, #0
 8001802:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001804:	4b79      	ldr	r3, [pc, #484]	@ (80019ec <HAL_RCC_GetSysClockFreq+0x200>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f003 030c 	and.w	r3, r3, #12
 800180c:	2b08      	cmp	r3, #8
 800180e:	d00d      	beq.n	800182c <HAL_RCC_GetSysClockFreq+0x40>
 8001810:	2b08      	cmp	r3, #8
 8001812:	f200 80e1 	bhi.w	80019d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001816:	2b00      	cmp	r3, #0
 8001818:	d002      	beq.n	8001820 <HAL_RCC_GetSysClockFreq+0x34>
 800181a:	2b04      	cmp	r3, #4
 800181c:	d003      	beq.n	8001826 <HAL_RCC_GetSysClockFreq+0x3a>
 800181e:	e0db      	b.n	80019d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001820:	4b73      	ldr	r3, [pc, #460]	@ (80019f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001822:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001824:	e0db      	b.n	80019de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001826:	4b73      	ldr	r3, [pc, #460]	@ (80019f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001828:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800182a:	e0d8      	b.n	80019de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800182c:	4b6f      	ldr	r3, [pc, #444]	@ (80019ec <HAL_RCC_GetSysClockFreq+0x200>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001834:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001836:	4b6d      	ldr	r3, [pc, #436]	@ (80019ec <HAL_RCC_GetSysClockFreq+0x200>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d063      	beq.n	800190a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001842:	4b6a      	ldr	r3, [pc, #424]	@ (80019ec <HAL_RCC_GetSysClockFreq+0x200>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	099b      	lsrs	r3, r3, #6
 8001848:	2200      	movs	r2, #0
 800184a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800184c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800184e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001854:	633b      	str	r3, [r7, #48]	@ 0x30
 8001856:	2300      	movs	r3, #0
 8001858:	637b      	str	r3, [r7, #52]	@ 0x34
 800185a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800185e:	4622      	mov	r2, r4
 8001860:	462b      	mov	r3, r5
 8001862:	f04f 0000 	mov.w	r0, #0
 8001866:	f04f 0100 	mov.w	r1, #0
 800186a:	0159      	lsls	r1, r3, #5
 800186c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001870:	0150      	lsls	r0, r2, #5
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4621      	mov	r1, r4
 8001878:	1a51      	subs	r1, r2, r1
 800187a:	6139      	str	r1, [r7, #16]
 800187c:	4629      	mov	r1, r5
 800187e:	eb63 0301 	sbc.w	r3, r3, r1
 8001882:	617b      	str	r3, [r7, #20]
 8001884:	f04f 0200 	mov.w	r2, #0
 8001888:	f04f 0300 	mov.w	r3, #0
 800188c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001890:	4659      	mov	r1, fp
 8001892:	018b      	lsls	r3, r1, #6
 8001894:	4651      	mov	r1, sl
 8001896:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800189a:	4651      	mov	r1, sl
 800189c:	018a      	lsls	r2, r1, #6
 800189e:	4651      	mov	r1, sl
 80018a0:	ebb2 0801 	subs.w	r8, r2, r1
 80018a4:	4659      	mov	r1, fp
 80018a6:	eb63 0901 	sbc.w	r9, r3, r1
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	f04f 0300 	mov.w	r3, #0
 80018b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018be:	4690      	mov	r8, r2
 80018c0:	4699      	mov	r9, r3
 80018c2:	4623      	mov	r3, r4
 80018c4:	eb18 0303 	adds.w	r3, r8, r3
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	462b      	mov	r3, r5
 80018cc:	eb49 0303 	adc.w	r3, r9, r3
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	f04f 0300 	mov.w	r3, #0
 80018da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018de:	4629      	mov	r1, r5
 80018e0:	024b      	lsls	r3, r1, #9
 80018e2:	4621      	mov	r1, r4
 80018e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018e8:	4621      	mov	r1, r4
 80018ea:	024a      	lsls	r2, r1, #9
 80018ec:	4610      	mov	r0, r2
 80018ee:	4619      	mov	r1, r3
 80018f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018f2:	2200      	movs	r2, #0
 80018f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80018f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80018fc:	f7fe fc6a 	bl	80001d4 <__aeabi_uldivmod>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4613      	mov	r3, r2
 8001906:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001908:	e058      	b.n	80019bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800190a:	4b38      	ldr	r3, [pc, #224]	@ (80019ec <HAL_RCC_GetSysClockFreq+0x200>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	099b      	lsrs	r3, r3, #6
 8001910:	2200      	movs	r2, #0
 8001912:	4618      	mov	r0, r3
 8001914:	4611      	mov	r1, r2
 8001916:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800191a:	623b      	str	r3, [r7, #32]
 800191c:	2300      	movs	r3, #0
 800191e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001920:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001924:	4642      	mov	r2, r8
 8001926:	464b      	mov	r3, r9
 8001928:	f04f 0000 	mov.w	r0, #0
 800192c:	f04f 0100 	mov.w	r1, #0
 8001930:	0159      	lsls	r1, r3, #5
 8001932:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001936:	0150      	lsls	r0, r2, #5
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4641      	mov	r1, r8
 800193e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001942:	4649      	mov	r1, r9
 8001944:	eb63 0b01 	sbc.w	fp, r3, r1
 8001948:	f04f 0200 	mov.w	r2, #0
 800194c:	f04f 0300 	mov.w	r3, #0
 8001950:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001954:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001958:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800195c:	ebb2 040a 	subs.w	r4, r2, sl
 8001960:	eb63 050b 	sbc.w	r5, r3, fp
 8001964:	f04f 0200 	mov.w	r2, #0
 8001968:	f04f 0300 	mov.w	r3, #0
 800196c:	00eb      	lsls	r3, r5, #3
 800196e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001972:	00e2      	lsls	r2, r4, #3
 8001974:	4614      	mov	r4, r2
 8001976:	461d      	mov	r5, r3
 8001978:	4643      	mov	r3, r8
 800197a:	18e3      	adds	r3, r4, r3
 800197c:	603b      	str	r3, [r7, #0]
 800197e:	464b      	mov	r3, r9
 8001980:	eb45 0303 	adc.w	r3, r5, r3
 8001984:	607b      	str	r3, [r7, #4]
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	f04f 0300 	mov.w	r3, #0
 800198e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001992:	4629      	mov	r1, r5
 8001994:	028b      	lsls	r3, r1, #10
 8001996:	4621      	mov	r1, r4
 8001998:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800199c:	4621      	mov	r1, r4
 800199e:	028a      	lsls	r2, r1, #10
 80019a0:	4610      	mov	r0, r2
 80019a2:	4619      	mov	r1, r3
 80019a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019a6:	2200      	movs	r2, #0
 80019a8:	61bb      	str	r3, [r7, #24]
 80019aa:	61fa      	str	r2, [r7, #28]
 80019ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019b0:	f7fe fc10 	bl	80001d4 <__aeabi_uldivmod>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	4613      	mov	r3, r2
 80019ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80019bc:	4b0b      	ldr	r3, [pc, #44]	@ (80019ec <HAL_RCC_GetSysClockFreq+0x200>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	0c1b      	lsrs	r3, r3, #16
 80019c2:	f003 0303 	and.w	r3, r3, #3
 80019c6:	3301      	adds	r3, #1
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80019cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80019ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019d6:	e002      	b.n	80019de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019d8:	4b05      	ldr	r3, [pc, #20]	@ (80019f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80019da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3750      	adds	r7, #80	@ 0x50
 80019e4:	46bd      	mov	sp, r7
 80019e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019ea:	bf00      	nop
 80019ec:	40023800 	.word	0x40023800
 80019f0:	00f42400 	.word	0x00f42400
 80019f4:	007a1200 	.word	0x007a1200

080019f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019fc:	4b03      	ldr	r3, [pc, #12]	@ (8001a0c <HAL_RCC_GetHCLKFreq+0x14>)
 80019fe:	681b      	ldr	r3, [r3, #0]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	20000000 	.word	0x20000000

08001a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a14:	f7ff fff0 	bl	80019f8 <HAL_RCC_GetHCLKFreq>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	4b05      	ldr	r3, [pc, #20]	@ (8001a30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	0a9b      	lsrs	r3, r3, #10
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	4903      	ldr	r1, [pc, #12]	@ (8001a34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a26:	5ccb      	ldrb	r3, [r1, r3]
 8001a28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40023800 	.word	0x40023800
 8001a34:	080028dc 	.word	0x080028dc

08001a38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a3c:	f7ff ffdc 	bl	80019f8 <HAL_RCC_GetHCLKFreq>
 8001a40:	4602      	mov	r2, r0
 8001a42:	4b05      	ldr	r3, [pc, #20]	@ (8001a58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	0b5b      	lsrs	r3, r3, #13
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	4903      	ldr	r1, [pc, #12]	@ (8001a5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a4e:	5ccb      	ldrb	r3, [r1, r3]
 8001a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	080028dc 	.word	0x080028dc

08001a60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e041      	b.n	8001af6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d106      	bne.n	8001a8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7fe ff28 	bl	80008dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2202      	movs	r2, #2
 8001a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3304      	adds	r3, #4
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	f000 fa70 	bl	8001f84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d001      	beq.n	8001b18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e044      	b.n	8001ba2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68da      	ldr	r2, [r3, #12]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f042 0201 	orr.w	r2, r2, #1
 8001b2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a1e      	ldr	r2, [pc, #120]	@ (8001bb0 <HAL_TIM_Base_Start_IT+0xb0>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d018      	beq.n	8001b6c <HAL_TIM_Base_Start_IT+0x6c>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b42:	d013      	beq.n	8001b6c <HAL_TIM_Base_Start_IT+0x6c>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a1a      	ldr	r2, [pc, #104]	@ (8001bb4 <HAL_TIM_Base_Start_IT+0xb4>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d00e      	beq.n	8001b6c <HAL_TIM_Base_Start_IT+0x6c>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a19      	ldr	r2, [pc, #100]	@ (8001bb8 <HAL_TIM_Base_Start_IT+0xb8>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d009      	beq.n	8001b6c <HAL_TIM_Base_Start_IT+0x6c>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a17      	ldr	r2, [pc, #92]	@ (8001bbc <HAL_TIM_Base_Start_IT+0xbc>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d004      	beq.n	8001b6c <HAL_TIM_Base_Start_IT+0x6c>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a16      	ldr	r2, [pc, #88]	@ (8001bc0 <HAL_TIM_Base_Start_IT+0xc0>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d111      	bne.n	8001b90 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2b06      	cmp	r3, #6
 8001b7c:	d010      	beq.n	8001ba0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f042 0201 	orr.w	r2, r2, #1
 8001b8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b8e:	e007      	b.n	8001ba0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f042 0201 	orr.w	r2, r2, #1
 8001b9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40010000 	.word	0x40010000
 8001bb4:	40000400 	.word	0x40000400
 8001bb8:	40000800 	.word	0x40000800
 8001bbc:	40000c00 	.word	0x40000c00
 8001bc0:	40014000 	.word	0x40014000

08001bc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d020      	beq.n	8001c28 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d01b      	beq.n	8001c28 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f06f 0202 	mvn.w	r2, #2
 8001bf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f999 	bl	8001f46 <HAL_TIM_IC_CaptureCallback>
 8001c14:	e005      	b.n	8001c22 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f98b 	bl	8001f32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 f99c 	bl	8001f5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	f003 0304 	and.w	r3, r3, #4
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d020      	beq.n	8001c74 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d01b      	beq.n	8001c74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f06f 0204 	mvn.w	r2, #4
 8001c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2202      	movs	r2, #2
 8001c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f973 	bl	8001f46 <HAL_TIM_IC_CaptureCallback>
 8001c60:	e005      	b.n	8001c6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f965 	bl	8001f32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 f976 	bl	8001f5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	f003 0308 	and.w	r3, r3, #8
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d020      	beq.n	8001cc0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f003 0308 	and.w	r3, r3, #8
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d01b      	beq.n	8001cc0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f06f 0208 	mvn.w	r2, #8
 8001c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2204      	movs	r2, #4
 8001c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f94d 	bl	8001f46 <HAL_TIM_IC_CaptureCallback>
 8001cac:	e005      	b.n	8001cba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f93f 	bl	8001f32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 f950 	bl	8001f5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	f003 0310 	and.w	r3, r3, #16
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d020      	beq.n	8001d0c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f003 0310 	and.w	r3, r3, #16
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d01b      	beq.n	8001d0c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f06f 0210 	mvn.w	r2, #16
 8001cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2208      	movs	r2, #8
 8001ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f927 	bl	8001f46 <HAL_TIM_IC_CaptureCallback>
 8001cf8:	e005      	b.n	8001d06 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f919 	bl	8001f32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f92a 	bl	8001f5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00c      	beq.n	8001d30 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d007      	beq.n	8001d30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f06f 0201 	mvn.w	r2, #1
 8001d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7fe fd66 	bl	80007fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d00c      	beq.n	8001d54 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d007      	beq.n	8001d54 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 fab6 	bl	80022c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00c      	beq.n	8001d78 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d007      	beq.n	8001d78 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f8fb 	bl	8001f6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	f003 0320 	and.w	r3, r3, #32
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00c      	beq.n	8001d9c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f003 0320 	and.w	r3, r3, #32
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d007      	beq.n	8001d9c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f06f 0220 	mvn.w	r2, #32
 8001d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 fa88 	bl	80022ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d9c:	bf00      	nop
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dae:	2300      	movs	r3, #0
 8001db0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d101      	bne.n	8001dc0 <HAL_TIM_ConfigClockSource+0x1c>
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	e0b4      	b.n	8001f2a <HAL_TIM_ConfigClockSource+0x186>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2202      	movs	r2, #2
 8001dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001dde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001de6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68ba      	ldr	r2, [r7, #8]
 8001dee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001df8:	d03e      	beq.n	8001e78 <HAL_TIM_ConfigClockSource+0xd4>
 8001dfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001dfe:	f200 8087 	bhi.w	8001f10 <HAL_TIM_ConfigClockSource+0x16c>
 8001e02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e06:	f000 8086 	beq.w	8001f16 <HAL_TIM_ConfigClockSource+0x172>
 8001e0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e0e:	d87f      	bhi.n	8001f10 <HAL_TIM_ConfigClockSource+0x16c>
 8001e10:	2b70      	cmp	r3, #112	@ 0x70
 8001e12:	d01a      	beq.n	8001e4a <HAL_TIM_ConfigClockSource+0xa6>
 8001e14:	2b70      	cmp	r3, #112	@ 0x70
 8001e16:	d87b      	bhi.n	8001f10 <HAL_TIM_ConfigClockSource+0x16c>
 8001e18:	2b60      	cmp	r3, #96	@ 0x60
 8001e1a:	d050      	beq.n	8001ebe <HAL_TIM_ConfigClockSource+0x11a>
 8001e1c:	2b60      	cmp	r3, #96	@ 0x60
 8001e1e:	d877      	bhi.n	8001f10 <HAL_TIM_ConfigClockSource+0x16c>
 8001e20:	2b50      	cmp	r3, #80	@ 0x50
 8001e22:	d03c      	beq.n	8001e9e <HAL_TIM_ConfigClockSource+0xfa>
 8001e24:	2b50      	cmp	r3, #80	@ 0x50
 8001e26:	d873      	bhi.n	8001f10 <HAL_TIM_ConfigClockSource+0x16c>
 8001e28:	2b40      	cmp	r3, #64	@ 0x40
 8001e2a:	d058      	beq.n	8001ede <HAL_TIM_ConfigClockSource+0x13a>
 8001e2c:	2b40      	cmp	r3, #64	@ 0x40
 8001e2e:	d86f      	bhi.n	8001f10 <HAL_TIM_ConfigClockSource+0x16c>
 8001e30:	2b30      	cmp	r3, #48	@ 0x30
 8001e32:	d064      	beq.n	8001efe <HAL_TIM_ConfigClockSource+0x15a>
 8001e34:	2b30      	cmp	r3, #48	@ 0x30
 8001e36:	d86b      	bhi.n	8001f10 <HAL_TIM_ConfigClockSource+0x16c>
 8001e38:	2b20      	cmp	r3, #32
 8001e3a:	d060      	beq.n	8001efe <HAL_TIM_ConfigClockSource+0x15a>
 8001e3c:	2b20      	cmp	r3, #32
 8001e3e:	d867      	bhi.n	8001f10 <HAL_TIM_ConfigClockSource+0x16c>
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d05c      	beq.n	8001efe <HAL_TIM_ConfigClockSource+0x15a>
 8001e44:	2b10      	cmp	r3, #16
 8001e46:	d05a      	beq.n	8001efe <HAL_TIM_ConfigClockSource+0x15a>
 8001e48:	e062      	b.n	8001f10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001e5a:	f000 f999 	bl	8002190 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001e6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68ba      	ldr	r2, [r7, #8]
 8001e74:	609a      	str	r2, [r3, #8]
      break;
 8001e76:	e04f      	b.n	8001f18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001e88:	f000 f982 	bl	8002190 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	689a      	ldr	r2, [r3, #8]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e9a:	609a      	str	r2, [r3, #8]
      break;
 8001e9c:	e03c      	b.n	8001f18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001eaa:	461a      	mov	r2, r3
 8001eac:	f000 f8f6 	bl	800209c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2150      	movs	r1, #80	@ 0x50
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f000 f94f 	bl	800215a <TIM_ITRx_SetConfig>
      break;
 8001ebc:	e02c      	b.n	8001f18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001eca:	461a      	mov	r2, r3
 8001ecc:	f000 f915 	bl	80020fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2160      	movs	r1, #96	@ 0x60
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f000 f93f 	bl	800215a <TIM_ITRx_SetConfig>
      break;
 8001edc:	e01c      	b.n	8001f18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001eea:	461a      	mov	r2, r3
 8001eec:	f000 f8d6 	bl	800209c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2140      	movs	r1, #64	@ 0x40
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 f92f 	bl	800215a <TIM_ITRx_SetConfig>
      break;
 8001efc:	e00c      	b.n	8001f18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4619      	mov	r1, r3
 8001f08:	4610      	mov	r0, r2
 8001f0a:	f000 f926 	bl	800215a <TIM_ITRx_SetConfig>
      break;
 8001f0e:	e003      	b.n	8001f18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	73fb      	strb	r3, [r7, #15]
      break;
 8001f14:	e000      	b.n	8001f18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001f16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
	...

08001f84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a3a      	ldr	r2, [pc, #232]	@ (8002080 <TIM_Base_SetConfig+0xfc>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d00f      	beq.n	8001fbc <TIM_Base_SetConfig+0x38>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fa2:	d00b      	beq.n	8001fbc <TIM_Base_SetConfig+0x38>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a37      	ldr	r2, [pc, #220]	@ (8002084 <TIM_Base_SetConfig+0x100>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d007      	beq.n	8001fbc <TIM_Base_SetConfig+0x38>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a36      	ldr	r2, [pc, #216]	@ (8002088 <TIM_Base_SetConfig+0x104>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d003      	beq.n	8001fbc <TIM_Base_SetConfig+0x38>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a35      	ldr	r2, [pc, #212]	@ (800208c <TIM_Base_SetConfig+0x108>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d108      	bne.n	8001fce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a2b      	ldr	r2, [pc, #172]	@ (8002080 <TIM_Base_SetConfig+0xfc>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d01b      	beq.n	800200e <TIM_Base_SetConfig+0x8a>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fdc:	d017      	beq.n	800200e <TIM_Base_SetConfig+0x8a>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a28      	ldr	r2, [pc, #160]	@ (8002084 <TIM_Base_SetConfig+0x100>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d013      	beq.n	800200e <TIM_Base_SetConfig+0x8a>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a27      	ldr	r2, [pc, #156]	@ (8002088 <TIM_Base_SetConfig+0x104>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d00f      	beq.n	800200e <TIM_Base_SetConfig+0x8a>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a26      	ldr	r2, [pc, #152]	@ (800208c <TIM_Base_SetConfig+0x108>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d00b      	beq.n	800200e <TIM_Base_SetConfig+0x8a>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a25      	ldr	r2, [pc, #148]	@ (8002090 <TIM_Base_SetConfig+0x10c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d007      	beq.n	800200e <TIM_Base_SetConfig+0x8a>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a24      	ldr	r2, [pc, #144]	@ (8002094 <TIM_Base_SetConfig+0x110>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d003      	beq.n	800200e <TIM_Base_SetConfig+0x8a>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a23      	ldr	r2, [pc, #140]	@ (8002098 <TIM_Base_SetConfig+0x114>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d108      	bne.n	8002020 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002014:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	4313      	orrs	r3, r2
 800201e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	4313      	orrs	r3, r2
 800202c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a0e      	ldr	r2, [pc, #56]	@ (8002080 <TIM_Base_SetConfig+0xfc>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d103      	bne.n	8002054 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	691a      	ldr	r2, [r3, #16]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b01      	cmp	r3, #1
 8002064:	d105      	bne.n	8002072 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	f023 0201 	bic.w	r2, r3, #1
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	611a      	str	r2, [r3, #16]
  }
}
 8002072:	bf00      	nop
 8002074:	3714      	adds	r7, #20
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	40010000 	.word	0x40010000
 8002084:	40000400 	.word	0x40000400
 8002088:	40000800 	.word	0x40000800
 800208c:	40000c00 	.word	0x40000c00
 8002090:	40014000 	.word	0x40014000
 8002094:	40014400 	.word	0x40014400
 8002098:	40014800 	.word	0x40014800

0800209c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800209c:	b480      	push	{r7}
 800209e:	b087      	sub	sp, #28
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	f023 0201 	bic.w	r2, r3, #1
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80020c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	011b      	lsls	r3, r3, #4
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	f023 030a 	bic.w	r3, r3, #10
 80020d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	4313      	orrs	r3, r2
 80020e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	621a      	str	r2, [r3, #32]
}
 80020ee:	bf00      	nop
 80020f0:	371c      	adds	r7, #28
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b087      	sub	sp, #28
 80020fe:	af00      	add	r7, sp, #0
 8002100:	60f8      	str	r0, [r7, #12]
 8002102:	60b9      	str	r1, [r7, #8]
 8002104:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	f023 0210 	bic.w	r2, r3, #16
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002124:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	031b      	lsls	r3, r3, #12
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	4313      	orrs	r3, r2
 800212e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002136:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	011b      	lsls	r3, r3, #4
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	4313      	orrs	r3, r2
 8002140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	621a      	str	r2, [r3, #32]
}
 800214e:	bf00      	nop
 8002150:	371c      	adds	r7, #28
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800215a:	b480      	push	{r7}
 800215c:	b085      	sub	sp, #20
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002170:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4313      	orrs	r3, r2
 8002178:	f043 0307 	orr.w	r3, r3, #7
 800217c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	609a      	str	r2, [r3, #8]
}
 8002184:	bf00      	nop
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002190:	b480      	push	{r7}
 8002192:	b087      	sub	sp, #28
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
 800219c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80021aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	021a      	lsls	r2, r3, #8
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	431a      	orrs	r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	609a      	str	r2, [r3, #8]
}
 80021c4:	bf00      	nop
 80021c6:	371c      	adds	r7, #28
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d101      	bne.n	80021e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80021e4:	2302      	movs	r3, #2
 80021e6:	e050      	b.n	800228a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2202      	movs	r2, #2
 80021f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800220e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	4313      	orrs	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a1c      	ldr	r2, [pc, #112]	@ (8002298 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d018      	beq.n	800225e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002234:	d013      	beq.n	800225e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a18      	ldr	r2, [pc, #96]	@ (800229c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d00e      	beq.n	800225e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a16      	ldr	r2, [pc, #88]	@ (80022a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d009      	beq.n	800225e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a15      	ldr	r2, [pc, #84]	@ (80022a4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d004      	beq.n	800225e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a13      	ldr	r2, [pc, #76]	@ (80022a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d10c      	bne.n	8002278 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002264:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	4313      	orrs	r3, r2
 800226e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68ba      	ldr	r2, [r7, #8]
 8002276:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	40010000 	.word	0x40010000
 800229c:	40000400 	.word	0x40000400
 80022a0:	40000800 	.word	0x40000800
 80022a4:	40000c00 	.word	0x40000c00
 80022a8:	40014000 	.word	0x40014000

080022ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e042      	b.n	800236c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d106      	bne.n	8002300 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7fe fb14 	bl	8000928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2224      	movs	r2, #36	@ 0x24
 8002304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68da      	ldr	r2, [r3, #12]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002316:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f82b 	bl	8002374 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	691a      	ldr	r2, [r3, #16]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800232c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	695a      	ldr	r2, [r3, #20]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800233c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68da      	ldr	r2, [r3, #12]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800234c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2220      	movs	r2, #32
 8002358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2220      	movs	r2, #32
 8002360:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002374:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002378:	b0c0      	sub	sp, #256	@ 0x100
 800237a:	af00      	add	r7, sp, #0
 800237c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800238c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002390:	68d9      	ldr	r1, [r3, #12]
 8002392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	ea40 0301 	orr.w	r3, r0, r1
 800239c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800239e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	431a      	orrs	r2, r3
 80023ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	431a      	orrs	r2, r3
 80023b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80023c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80023cc:	f021 010c 	bic.w	r1, r1, #12
 80023d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80023da:	430b      	orrs	r3, r1
 80023dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80023ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023ee:	6999      	ldr	r1, [r3, #24]
 80023f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	ea40 0301 	orr.w	r3, r0, r1
 80023fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80023fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	4b8f      	ldr	r3, [pc, #572]	@ (8002640 <UART_SetConfig+0x2cc>)
 8002404:	429a      	cmp	r2, r3
 8002406:	d005      	beq.n	8002414 <UART_SetConfig+0xa0>
 8002408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	4b8d      	ldr	r3, [pc, #564]	@ (8002644 <UART_SetConfig+0x2d0>)
 8002410:	429a      	cmp	r2, r3
 8002412:	d104      	bne.n	800241e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002414:	f7ff fb10 	bl	8001a38 <HAL_RCC_GetPCLK2Freq>
 8002418:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800241c:	e003      	b.n	8002426 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800241e:	f7ff faf7 	bl	8001a10 <HAL_RCC_GetPCLK1Freq>
 8002422:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800242a:	69db      	ldr	r3, [r3, #28]
 800242c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002430:	f040 810c 	bne.w	800264c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002434:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002438:	2200      	movs	r2, #0
 800243a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800243e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002442:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002446:	4622      	mov	r2, r4
 8002448:	462b      	mov	r3, r5
 800244a:	1891      	adds	r1, r2, r2
 800244c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800244e:	415b      	adcs	r3, r3
 8002450:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002452:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002456:	4621      	mov	r1, r4
 8002458:	eb12 0801 	adds.w	r8, r2, r1
 800245c:	4629      	mov	r1, r5
 800245e:	eb43 0901 	adc.w	r9, r3, r1
 8002462:	f04f 0200 	mov.w	r2, #0
 8002466:	f04f 0300 	mov.w	r3, #0
 800246a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800246e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002472:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002476:	4690      	mov	r8, r2
 8002478:	4699      	mov	r9, r3
 800247a:	4623      	mov	r3, r4
 800247c:	eb18 0303 	adds.w	r3, r8, r3
 8002480:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002484:	462b      	mov	r3, r5
 8002486:	eb49 0303 	adc.w	r3, r9, r3
 800248a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800248e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800249a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800249e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80024a2:	460b      	mov	r3, r1
 80024a4:	18db      	adds	r3, r3, r3
 80024a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80024a8:	4613      	mov	r3, r2
 80024aa:	eb42 0303 	adc.w	r3, r2, r3
 80024ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80024b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80024b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80024b8:	f7fd fe8c 	bl	80001d4 <__aeabi_uldivmod>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	4b61      	ldr	r3, [pc, #388]	@ (8002648 <UART_SetConfig+0x2d4>)
 80024c2:	fba3 2302 	umull	r2, r3, r3, r2
 80024c6:	095b      	lsrs	r3, r3, #5
 80024c8:	011c      	lsls	r4, r3, #4
 80024ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80024ce:	2200      	movs	r2, #0
 80024d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80024d4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80024d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80024dc:	4642      	mov	r2, r8
 80024de:	464b      	mov	r3, r9
 80024e0:	1891      	adds	r1, r2, r2
 80024e2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80024e4:	415b      	adcs	r3, r3
 80024e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80024ec:	4641      	mov	r1, r8
 80024ee:	eb12 0a01 	adds.w	sl, r2, r1
 80024f2:	4649      	mov	r1, r9
 80024f4:	eb43 0b01 	adc.w	fp, r3, r1
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	f04f 0300 	mov.w	r3, #0
 8002500:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002504:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002508:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800250c:	4692      	mov	sl, r2
 800250e:	469b      	mov	fp, r3
 8002510:	4643      	mov	r3, r8
 8002512:	eb1a 0303 	adds.w	r3, sl, r3
 8002516:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800251a:	464b      	mov	r3, r9
 800251c:	eb4b 0303 	adc.w	r3, fp, r3
 8002520:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002530:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002534:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002538:	460b      	mov	r3, r1
 800253a:	18db      	adds	r3, r3, r3
 800253c:	643b      	str	r3, [r7, #64]	@ 0x40
 800253e:	4613      	mov	r3, r2
 8002540:	eb42 0303 	adc.w	r3, r2, r3
 8002544:	647b      	str	r3, [r7, #68]	@ 0x44
 8002546:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800254a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800254e:	f7fd fe41 	bl	80001d4 <__aeabi_uldivmod>
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	4611      	mov	r1, r2
 8002558:	4b3b      	ldr	r3, [pc, #236]	@ (8002648 <UART_SetConfig+0x2d4>)
 800255a:	fba3 2301 	umull	r2, r3, r3, r1
 800255e:	095b      	lsrs	r3, r3, #5
 8002560:	2264      	movs	r2, #100	@ 0x64
 8002562:	fb02 f303 	mul.w	r3, r2, r3
 8002566:	1acb      	subs	r3, r1, r3
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800256e:	4b36      	ldr	r3, [pc, #216]	@ (8002648 <UART_SetConfig+0x2d4>)
 8002570:	fba3 2302 	umull	r2, r3, r3, r2
 8002574:	095b      	lsrs	r3, r3, #5
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800257c:	441c      	add	r4, r3
 800257e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002582:	2200      	movs	r2, #0
 8002584:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002588:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800258c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002590:	4642      	mov	r2, r8
 8002592:	464b      	mov	r3, r9
 8002594:	1891      	adds	r1, r2, r2
 8002596:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002598:	415b      	adcs	r3, r3
 800259a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800259c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80025a0:	4641      	mov	r1, r8
 80025a2:	1851      	adds	r1, r2, r1
 80025a4:	6339      	str	r1, [r7, #48]	@ 0x30
 80025a6:	4649      	mov	r1, r9
 80025a8:	414b      	adcs	r3, r1
 80025aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80025ac:	f04f 0200 	mov.w	r2, #0
 80025b0:	f04f 0300 	mov.w	r3, #0
 80025b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80025b8:	4659      	mov	r1, fp
 80025ba:	00cb      	lsls	r3, r1, #3
 80025bc:	4651      	mov	r1, sl
 80025be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025c2:	4651      	mov	r1, sl
 80025c4:	00ca      	lsls	r2, r1, #3
 80025c6:	4610      	mov	r0, r2
 80025c8:	4619      	mov	r1, r3
 80025ca:	4603      	mov	r3, r0
 80025cc:	4642      	mov	r2, r8
 80025ce:	189b      	adds	r3, r3, r2
 80025d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80025d4:	464b      	mov	r3, r9
 80025d6:	460a      	mov	r2, r1
 80025d8:	eb42 0303 	adc.w	r3, r2, r3
 80025dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80025e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80025ec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80025f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80025f4:	460b      	mov	r3, r1
 80025f6:	18db      	adds	r3, r3, r3
 80025f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025fa:	4613      	mov	r3, r2
 80025fc:	eb42 0303 	adc.w	r3, r2, r3
 8002600:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002602:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002606:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800260a:	f7fd fde3 	bl	80001d4 <__aeabi_uldivmod>
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	4b0d      	ldr	r3, [pc, #52]	@ (8002648 <UART_SetConfig+0x2d4>)
 8002614:	fba3 1302 	umull	r1, r3, r3, r2
 8002618:	095b      	lsrs	r3, r3, #5
 800261a:	2164      	movs	r1, #100	@ 0x64
 800261c:	fb01 f303 	mul.w	r3, r1, r3
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	3332      	adds	r3, #50	@ 0x32
 8002626:	4a08      	ldr	r2, [pc, #32]	@ (8002648 <UART_SetConfig+0x2d4>)
 8002628:	fba2 2303 	umull	r2, r3, r2, r3
 800262c:	095b      	lsrs	r3, r3, #5
 800262e:	f003 0207 	and.w	r2, r3, #7
 8002632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4422      	add	r2, r4
 800263a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800263c:	e106      	b.n	800284c <UART_SetConfig+0x4d8>
 800263e:	bf00      	nop
 8002640:	40011000 	.word	0x40011000
 8002644:	40011400 	.word	0x40011400
 8002648:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800264c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002650:	2200      	movs	r2, #0
 8002652:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002656:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800265a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800265e:	4642      	mov	r2, r8
 8002660:	464b      	mov	r3, r9
 8002662:	1891      	adds	r1, r2, r2
 8002664:	6239      	str	r1, [r7, #32]
 8002666:	415b      	adcs	r3, r3
 8002668:	627b      	str	r3, [r7, #36]	@ 0x24
 800266a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800266e:	4641      	mov	r1, r8
 8002670:	1854      	adds	r4, r2, r1
 8002672:	4649      	mov	r1, r9
 8002674:	eb43 0501 	adc.w	r5, r3, r1
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	f04f 0300 	mov.w	r3, #0
 8002680:	00eb      	lsls	r3, r5, #3
 8002682:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002686:	00e2      	lsls	r2, r4, #3
 8002688:	4614      	mov	r4, r2
 800268a:	461d      	mov	r5, r3
 800268c:	4643      	mov	r3, r8
 800268e:	18e3      	adds	r3, r4, r3
 8002690:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002694:	464b      	mov	r3, r9
 8002696:	eb45 0303 	adc.w	r3, r5, r3
 800269a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800269e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80026aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	f04f 0300 	mov.w	r3, #0
 80026b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80026ba:	4629      	mov	r1, r5
 80026bc:	008b      	lsls	r3, r1, #2
 80026be:	4621      	mov	r1, r4
 80026c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026c4:	4621      	mov	r1, r4
 80026c6:	008a      	lsls	r2, r1, #2
 80026c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80026cc:	f7fd fd82 	bl	80001d4 <__aeabi_uldivmod>
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	4b60      	ldr	r3, [pc, #384]	@ (8002858 <UART_SetConfig+0x4e4>)
 80026d6:	fba3 2302 	umull	r2, r3, r3, r2
 80026da:	095b      	lsrs	r3, r3, #5
 80026dc:	011c      	lsls	r4, r3, #4
 80026de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026e2:	2200      	movs	r2, #0
 80026e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80026e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80026ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80026f0:	4642      	mov	r2, r8
 80026f2:	464b      	mov	r3, r9
 80026f4:	1891      	adds	r1, r2, r2
 80026f6:	61b9      	str	r1, [r7, #24]
 80026f8:	415b      	adcs	r3, r3
 80026fa:	61fb      	str	r3, [r7, #28]
 80026fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002700:	4641      	mov	r1, r8
 8002702:	1851      	adds	r1, r2, r1
 8002704:	6139      	str	r1, [r7, #16]
 8002706:	4649      	mov	r1, r9
 8002708:	414b      	adcs	r3, r1
 800270a:	617b      	str	r3, [r7, #20]
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	f04f 0300 	mov.w	r3, #0
 8002714:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002718:	4659      	mov	r1, fp
 800271a:	00cb      	lsls	r3, r1, #3
 800271c:	4651      	mov	r1, sl
 800271e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002722:	4651      	mov	r1, sl
 8002724:	00ca      	lsls	r2, r1, #3
 8002726:	4610      	mov	r0, r2
 8002728:	4619      	mov	r1, r3
 800272a:	4603      	mov	r3, r0
 800272c:	4642      	mov	r2, r8
 800272e:	189b      	adds	r3, r3, r2
 8002730:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002734:	464b      	mov	r3, r9
 8002736:	460a      	mov	r2, r1
 8002738:	eb42 0303 	adc.w	r3, r2, r3
 800273c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	67bb      	str	r3, [r7, #120]	@ 0x78
 800274a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	f04f 0300 	mov.w	r3, #0
 8002754:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002758:	4649      	mov	r1, r9
 800275a:	008b      	lsls	r3, r1, #2
 800275c:	4641      	mov	r1, r8
 800275e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002762:	4641      	mov	r1, r8
 8002764:	008a      	lsls	r2, r1, #2
 8002766:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800276a:	f7fd fd33 	bl	80001d4 <__aeabi_uldivmod>
 800276e:	4602      	mov	r2, r0
 8002770:	460b      	mov	r3, r1
 8002772:	4611      	mov	r1, r2
 8002774:	4b38      	ldr	r3, [pc, #224]	@ (8002858 <UART_SetConfig+0x4e4>)
 8002776:	fba3 2301 	umull	r2, r3, r3, r1
 800277a:	095b      	lsrs	r3, r3, #5
 800277c:	2264      	movs	r2, #100	@ 0x64
 800277e:	fb02 f303 	mul.w	r3, r2, r3
 8002782:	1acb      	subs	r3, r1, r3
 8002784:	011b      	lsls	r3, r3, #4
 8002786:	3332      	adds	r3, #50	@ 0x32
 8002788:	4a33      	ldr	r2, [pc, #204]	@ (8002858 <UART_SetConfig+0x4e4>)
 800278a:	fba2 2303 	umull	r2, r3, r2, r3
 800278e:	095b      	lsrs	r3, r3, #5
 8002790:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002794:	441c      	add	r4, r3
 8002796:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800279a:	2200      	movs	r2, #0
 800279c:	673b      	str	r3, [r7, #112]	@ 0x70
 800279e:	677a      	str	r2, [r7, #116]	@ 0x74
 80027a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80027a4:	4642      	mov	r2, r8
 80027a6:	464b      	mov	r3, r9
 80027a8:	1891      	adds	r1, r2, r2
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	415b      	adcs	r3, r3
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027b4:	4641      	mov	r1, r8
 80027b6:	1851      	adds	r1, r2, r1
 80027b8:	6039      	str	r1, [r7, #0]
 80027ba:	4649      	mov	r1, r9
 80027bc:	414b      	adcs	r3, r1
 80027be:	607b      	str	r3, [r7, #4]
 80027c0:	f04f 0200 	mov.w	r2, #0
 80027c4:	f04f 0300 	mov.w	r3, #0
 80027c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80027cc:	4659      	mov	r1, fp
 80027ce:	00cb      	lsls	r3, r1, #3
 80027d0:	4651      	mov	r1, sl
 80027d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027d6:	4651      	mov	r1, sl
 80027d8:	00ca      	lsls	r2, r1, #3
 80027da:	4610      	mov	r0, r2
 80027dc:	4619      	mov	r1, r3
 80027de:	4603      	mov	r3, r0
 80027e0:	4642      	mov	r2, r8
 80027e2:	189b      	adds	r3, r3, r2
 80027e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80027e6:	464b      	mov	r3, r9
 80027e8:	460a      	mov	r2, r1
 80027ea:	eb42 0303 	adc.w	r3, r2, r3
 80027ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80027f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80027fa:	667a      	str	r2, [r7, #100]	@ 0x64
 80027fc:	f04f 0200 	mov.w	r2, #0
 8002800:	f04f 0300 	mov.w	r3, #0
 8002804:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002808:	4649      	mov	r1, r9
 800280a:	008b      	lsls	r3, r1, #2
 800280c:	4641      	mov	r1, r8
 800280e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002812:	4641      	mov	r1, r8
 8002814:	008a      	lsls	r2, r1, #2
 8002816:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800281a:	f7fd fcdb 	bl	80001d4 <__aeabi_uldivmod>
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	4b0d      	ldr	r3, [pc, #52]	@ (8002858 <UART_SetConfig+0x4e4>)
 8002824:	fba3 1302 	umull	r1, r3, r3, r2
 8002828:	095b      	lsrs	r3, r3, #5
 800282a:	2164      	movs	r1, #100	@ 0x64
 800282c:	fb01 f303 	mul.w	r3, r1, r3
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	011b      	lsls	r3, r3, #4
 8002834:	3332      	adds	r3, #50	@ 0x32
 8002836:	4a08      	ldr	r2, [pc, #32]	@ (8002858 <UART_SetConfig+0x4e4>)
 8002838:	fba2 2303 	umull	r2, r3, r2, r3
 800283c:	095b      	lsrs	r3, r3, #5
 800283e:	f003 020f 	and.w	r2, r3, #15
 8002842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4422      	add	r2, r4
 800284a:	609a      	str	r2, [r3, #8]
}
 800284c:	bf00      	nop
 800284e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002852:	46bd      	mov	sp, r7
 8002854:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002858:	51eb851f 	.word	0x51eb851f

0800285c <memset>:
 800285c:	4402      	add	r2, r0
 800285e:	4603      	mov	r3, r0
 8002860:	4293      	cmp	r3, r2
 8002862:	d100      	bne.n	8002866 <memset+0xa>
 8002864:	4770      	bx	lr
 8002866:	f803 1b01 	strb.w	r1, [r3], #1
 800286a:	e7f9      	b.n	8002860 <memset+0x4>

0800286c <__libc_init_array>:
 800286c:	b570      	push	{r4, r5, r6, lr}
 800286e:	4d0d      	ldr	r5, [pc, #52]	@ (80028a4 <__libc_init_array+0x38>)
 8002870:	4c0d      	ldr	r4, [pc, #52]	@ (80028a8 <__libc_init_array+0x3c>)
 8002872:	1b64      	subs	r4, r4, r5
 8002874:	10a4      	asrs	r4, r4, #2
 8002876:	2600      	movs	r6, #0
 8002878:	42a6      	cmp	r6, r4
 800287a:	d109      	bne.n	8002890 <__libc_init_array+0x24>
 800287c:	4d0b      	ldr	r5, [pc, #44]	@ (80028ac <__libc_init_array+0x40>)
 800287e:	4c0c      	ldr	r4, [pc, #48]	@ (80028b0 <__libc_init_array+0x44>)
 8002880:	f000 f818 	bl	80028b4 <_init>
 8002884:	1b64      	subs	r4, r4, r5
 8002886:	10a4      	asrs	r4, r4, #2
 8002888:	2600      	movs	r6, #0
 800288a:	42a6      	cmp	r6, r4
 800288c:	d105      	bne.n	800289a <__libc_init_array+0x2e>
 800288e:	bd70      	pop	{r4, r5, r6, pc}
 8002890:	f855 3b04 	ldr.w	r3, [r5], #4
 8002894:	4798      	blx	r3
 8002896:	3601      	adds	r6, #1
 8002898:	e7ee      	b.n	8002878 <__libc_init_array+0xc>
 800289a:	f855 3b04 	ldr.w	r3, [r5], #4
 800289e:	4798      	blx	r3
 80028a0:	3601      	adds	r6, #1
 80028a2:	e7f2      	b.n	800288a <__libc_init_array+0x1e>
 80028a4:	080028ec 	.word	0x080028ec
 80028a8:	080028ec 	.word	0x080028ec
 80028ac:	080028ec 	.word	0x080028ec
 80028b0:	080028f0 	.word	0x080028f0

080028b4 <_init>:
 80028b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028b6:	bf00      	nop
 80028b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ba:	bc08      	pop	{r3}
 80028bc:	469e      	mov	lr, r3
 80028be:	4770      	bx	lr

080028c0 <_fini>:
 80028c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028c2:	bf00      	nop
 80028c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028c6:	bc08      	pop	{r3}
 80028c8:	469e      	mov	lr, r3
 80028ca:	4770      	bx	lr
